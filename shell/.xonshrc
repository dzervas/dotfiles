import builtins
import re

from datetime import datetime
from prompt_toolkit.keys import Keys
from xonsh.prompt.gitstatus import gitstatus_prompt
from xonsh.platform import ON_DARWIN


def gitprompt():
	if gitstatus_prompt():
		return "{BLUE}Â±{BOLD_GREEN}[" + gitstatus_prompt() + "{BOLD_GREEN}]"

def jobsprompt():
	jobs = $(jobs).splitlines()
	jobs = len(jobs) - 1

	if jobs > 0:
		return "{BOLD_GREEN}[{INTENSE_CYAN}J" + jobs + "{BOLD_GREEN}]"

def mkcd(args, stdin=None):
	mkdir @(args[0])
	cd @(args[0])

def notification(args, stdin=None):
	print("\a")

@events.on_ptk_create
def custom_keybindings(bindings, **kw):
	handler = bindings.add

	@handler(Keys.Escape, Keys.Escape)
	def prepend_sudo(event):
		event.current_buffer.text = "sudo " + event.current_buffer.text
		event.cli.current_buffer.cursor_right()

	@handler(Keys.Escape, "a")
	def up_sudo(event):
		event.current_buffer.history_backward()
		prepend_sudo(event)

	@handler(Keys.ControlR)
	def fzf_history(event):
		selector = "fzf" if $(echo $TMUX) else "fzf-tmux"
		items = $(history show all)
		choice = $(echo @(items) | @(selector) --tac -q @(event.current_buffer.text) --tiebreak=index +m).replace('\n', '')

		if choice:
			event.current_buffer.text = choice

# Environmental variables
$AUTO_CD = True
$BASH_COMPLETIONS.append("/usr/local/etc/bash_completion.d/")
$BASH_COMPLETIONS.append("/usr/local/share/bash-completion/bash_completion")
$CASE_SENSITIVE_COMPLETIONS = False
$EDITOR = "nvim"
$ALTERNATE_EDITOR = "vim"
$PATH = "~/.bin:~/.local/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:~/go/bin:~/.cargo/bin"
$PAGER = "bat -pn"
$PROJECT_DIRS = "~/Lab"
$PROMPT = "{vte_new_tab_cwd}{GREEN}{user} {BOLD_CYAN}{short_cwd}{NO_COLOR}> "
$RIGHT_PROMPT = "{git}{jobs}"
$TITLE = "{current_job}{user}@{hostname}: {cwd}"
$TZ = "Europe/Athens",

# Xonsh settings
$AUTO_SUGGEST_IN_COMPLETIONS = True
$CASE_SENSITIVE_COMPLETIONS = False
$COMPLETION_IN_THREAD = True
$DOTGLOB = True
$FOREIGN_ALIASES_SUPPRESS_SKIP_MESSAGE = True
$XONSH_COLOR_STYLE = "monokai"
$XONSH_AUTOPAIR = True

$PROMPT_FIELDS["git"] = gitprompt
$PROMPT_FIELDS["jobs"] = jobsprompt

# Coloured man page support
$LESS_TERMCAP_mb = "\033[01;31m"     # begin blinking
$LESS_TERMCAP_md = "\033[01;31m"     # begin bold
$LESS_TERMCAP_me = "\033[0m"         # end mode
$LESS_TERMCAP_so = "\033[01;44;36m"  # begin standout-mode (bottom of screen)
$LESS_TERMCAP_se = "\033[0m"         # end standout-mode
$LESS_TERMCAP_us = "\033[00;36m"     # begin underline
$LESS_TERMCAP_ue = "\033[0m"         # end underline

#$fzf_history_binding = Keys.ControlR
#$fzf_ssh_binding = Keys.ControlS

if ON_DARWIN:
	# Needs brew install bash-completion2
	source-bash $(/usr/libexec/path_helper -s)
	source-bash --seterrprevcmd "" /etc/profile

# Aliases
aliases["1ping"] = "ping 1.1.1.1"
aliases["cat"] = "bat -p --paging=never"
aliases["cdt"] = "cd $(mktemp -d)"
aliases["d"] = "docker"
aliases["dc"] = "docker-compose"
aliases["diff"] = "colordiff -ub"
aliases["docker_rm"] = "docker rm $(docker ps --no-trunc -aqf status=exited)"
aliases["docker_rmi"] = "docker rmi $(docker images --no-trunc -qf dangling=true)"
aliases["e"] = "${EDITOR}"
aliases["find"] = "fd"
aliases["g"] = "git"
aliases["grep"] = "rg"
aliases["ipy"] = "ipython"
aliases["jc"] = "curl -i -H 'Content-Type: application/json'"
aliases["less"] = "less -R"
aliases["l"] = "lsd -F"
aliases["ll"] = "lsd -Fal"
aliases["ls"] = "lsd -F"
aliases["mc"] = mkcd
aliases["n"] = notification
aliases["open"] = "xdg-open"
aliases["pgrep"] = "pgrep -af"
aliases["passgen"] = "gpg --gen-random --armor 1 "
aliases["pgrep"] = "pgrep -a"
aliases["py"] = "python"
aliases["py2"] = "python2"
aliases["py3"] = "python3"
aliases["sv"] = "sudoedit"
aliases["ssh"] = "ssh"
aliases["v"] = "nvim"
aliases["webserver"] = "python3 -m http.server"
aliases["wather"] = "curl wttr.in"
aliases[":e"] = "v"
aliases[":q"] = "exit"
aliases[";q"] = "exit"

# Xontribs
xontrib load autovox avox
xontrib load bashisms
xontrib load coreutils
xontrib load docker_tabcomplete
xontrib load jedi
xontrib load prompt_ret_code
xontrib load whole_word_jumping
